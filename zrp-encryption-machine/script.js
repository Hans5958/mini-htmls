const uint8ToBuffer=e=>e.buffer.slice(e.byteOffset,e.byteLength+e.byteOffset),bufferToUint8=e=>Array.from(new Uint8Array(e)),generateUint8=e=>new Uint8Array(e).map(()=>Math.floor(256*Math.random())),logElement=document.querySelector("pre#log"),logging={log(e="",t=!0){!0===t?(0!==this.temp.length&&(logElement.textContent+=this.temp.join("\n")+"\n",this.temp.length=0),logElement.textContent+=e+"\n",logElement.scrollTop=logElement.scrollHeight):this.temp.push(e)},clear(){logElement.textContent=""},temp:[]},updateDetails=(e,t=!0)=>{document.querySelector("#details").innerHTML=e,t&&logging.log(e)};let firstMessageTimeout;const timer={time:0,start(){return this.time=Date.now()},stop(){return this.time=Date.now()-this.time}},concatUint8=(...e)=>{let t=0;for(const o of e)t+=o.length;const o=new Uint8Array(t);let n=0;for(const t of e)o.set(t,n),n+=t.length;return o},download=(e,t)=>{const o=URL.createObjectURL(t),n=document.createElement("a");n.href=o,n.download=e,document.body.appendChild(n),n.click(),document.body.removeChild(n)},triggerFilePicker=()=>new Promise((e,t)=>{const o=document.createElement("input");o.type="file",o.accept=".zip,.zrp",o.oninput=(o=>{if(0===o.target.files.length)t();else{const t=o.target.files[0];e(t)}}),o.dispatchEvent(new MouseEvent("click",{bubbles:!0,cancelable:!0,view:window}))}),stopPropagation=e=>{e.stopPropagation(),e.preventDefault()},dropbox=document.querySelector("#dropbox");dropbox.addEventListener("dragenter",e=>{stopPropagation(e),dropbox.classList.add("dropping-down")},!1),dropbox.addEventListener("dragover",e=>{stopPropagation(e),dropbox.classList.add("dropping-down")},!1),dropbox.addEventListener("dragleave",e=>{stopPropagation(e),dropbox.classList.remove("dropping-down")},!1),dropbox.addEventListener("dragend",e=>{stopPropagation(e),dropbox.classList.remove("dropping-down")},!1),dropbox.addEventListener("drop",e=>{stopPropagation(e),dropbox.classList.remove("dropping-down");const t=e.dataTransfer.files;handleFile(t[0])},!1),dropbox.addEventListener("click",async e=>{stopPropagation(e),triggerFilePicker().then(e=>handleFile(e))},!1);const handleFile=async e=>{timer.start(),logging.clear();const t=e,o=e.name.substr(0,t.name.length-4),n=e.name.substr(this.length-3);try{if("zrp"===n){updateDetails("Obtaining key...");const e=bufferToUint8(await t.slice(0,16).arrayBuffer()),n=e;logging.log(`key: ${String.fromCharCode.apply(null,e)} (${e.join(", ")})`),logging.log(`iv: ${String.fromCharCode.apply(null,n)} (${n.join(", ")})`);const r=new aesjs.ModeOfOperation.cbc(e,n);updateDetails("Decrpyting...");const i=r.decrypt(bufferToUint8(await t.slice(16).arrayBuffer())).slice(16);let a=timer.stop()/1e3;updateDetails(`<code>${o}.zrp</code> has been decrypted to the <code>.zip</code> format in ${a} seconds.`,!1),logging.log(`${o}.zrp has been decrypted to the .zip format in ${a} seconds.`),download(`${o}.zip`,new Blob([uint8ToBuffer(i)],{type:"application/zip"}))}else{if("zip"!==n)throw"NotAnArchive";{updateDetails("Generating key...");let e=generateUint8(16);const n=e;logging.log(typeof e),logging.log(`key: ${String.fromCharCode.apply(null,e)} (${e.join(", ")})`),logging.log(`iv: ${String.fromCharCode.apply(null,n)} (${n.join(", ")})`);const r=new aesjs.ModeOfOperation.cbc(e,n);updateDetails("Adding padding...");let i=new Uint8Array;if(await t.size%16){const e=16-t.size%16;i=(i=new Uint8Array(e)).map(()=>e)}updateDetails("Encrypting...");const a=concatUint8(e,r.encrypt(concatUint8(generateUint8(16),bufferToUint8(await t.arrayBuffer()),i)));let s=timer.stop()/1e3;updateDetails(`<code>${o}.zip</code> has been encrypted to the <code>.zrp</code> format in ${s} seconds.`,!1),logging.log(`${o}.zip has been encrypted to the .zrp format in ${s} seconds.`),download(`${o}.zrp`,new Blob([uint8ToBuffer(a)],{type:"application/octet-stream"}))}}}catch(r){updateDetails("NotAnArchive"===r?"This is neither a <code>.zrp</code> archive nor a <code>.zip</code> archive!":`Something went wrong: ${r}`)}finally{try{clearInterval(firstMessageTimeout)}catch(r){}firstMessageTimeout=setTimeout(()=>updateDetails("Drop a <code>.zrp</code> archive to decrypt it or a <code>.zip</code> archive to encrypt it.",!1),1e4)}};