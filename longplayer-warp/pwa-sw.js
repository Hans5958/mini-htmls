function logInfo(...t){console.info(`[${cacheName}]`,...t)}const cacheName="longplayer-warp@220722123402",cacheResource="https://hans5958.github.io/mini-htmls/assets/js/base.js\nhttps://hans5958.github.io/mini-htmls/assets/js/pwa.js?t=220722123402\nhttps://hans5958.github.io/mini-htmls/assets/css/base.css\nhttps://hans5958.github.io/mini-htmls/assets/img/placeholder-144.png\nhttps://cdn.jsdelivr.net/combine/npm/jquery@3.5.1/dist/jquery.min.js,npm/bootstrap@4.6.1/dist/js/bootstrap.bundle.min.js,npm/pace-js@1.2.4,npm/@iconify/iconify@1.0.7\nhttps://cdn.jsdelivr.net/combine/npm/bootstrap@4.6.1/dist/css/bootstrap.min.css,npm/pace-js@1.2.4/themes/blue/pace-theme-flash.min.css\nhttps://hans5958.github.io/mini-htmls/longplayer-warp/\nhttps://hans5958.github.io/mini-htmls/longplayer-warp/index.html\nhttps://hans5958.github.io/mini-htmls/longplayer-warp/script.js\nhttps://hans5958.github.io/mini-htmls/longplayer-warp/bowls-and-score-hidpi.png\nhttps://hans5958.github.io/mini-htmls/longplayer-warp/segment-0.png\nhttps://hans5958.github.io/mini-htmls/longplayer-warp/segment-1.png\nhttps://hans5958.github.io/mini-htmls/longplayer-warp/segment-2.png\nhttps://hans5958.github.io/mini-htmls/longplayer-warp/segment-3.png\nhttps://hans5958.github.io/mini-htmls/longplayer-warp/segment-4.png\nhttps://hans5958.github.io/mini-htmls/longplayer-warp/segment-5.png\nhttps://cdn.jsdelivr.net/combine/npm/dayjs@1,npm/dayjs@1/plugin/utc.min.js,npm/dayjs@1/plugin/arraySupport.min.js,npm/js-datepicker@5.18.0\nhttps://cdn.jsdelivr.net/npm/js-datepicker@5.18.0/dist/datepicker.min.css\nhttps://hans5958.github.io/mini-htmls/longplayer-warp/pwa.webmanifest".trim().split("\n");self.addEventListener("install",t=>{logInfo("Service worker installed."),self.skipWaiting(),t.waitUntil(caches.open(cacheName).then(t=>t.addAll(cacheResource))),logInfo("Resources cached.")}),self.addEventListener("activate",t=>{logInfo("Service worker activated."),t.waitUntil(clients.claim())}),self.addEventListener("statechange",()=>{"installed"==newSW.state&&logInfo("Service worker updated.")}),self.addEventListener("fetch",t=>{t.respondWith((async()=>{const n=await fetch(t.request)["catch"](()=>undefined);if(n)return await caches.open(cacheName).then(s=>s.put(t.request,n.clone())),n;const s=await caches.match(t.request);return s||void 0})())});